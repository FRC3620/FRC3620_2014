// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3620.GoldenCode2014.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3620.GoldenCode2014.CatapultState;
import org.usfirst.frc3620.GoldenCode2014.Robot;

/**
 *
 */
public class CockAndShootQuickly extends Command {

    boolean DEBUG = false;

    public CockAndShootQuickly() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapultSubsystem);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        if (DEBUG) {
            System.out.println("CockAndShootQuickly init");
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        CatapultState currentState = Robot.catapultSubsystem.getCatapultState();
        if (DEBUG) {
            System.out.println("CockAndShootQuickly sees current state = " + currentState);
        }
        if (currentState == CatapultState.COCKED) {
            Robot.catapultSubsystem.setCatapultState(CatapultState.QUICK_SHOOTING_DELAY);
        } 
        else if (currentState == CatapultState.SHOOTING_DELAY) {
            Robot.catapultSubsystem.setCatapultState(CatapultState.QUICK_SHOOTING_DELAY);
        }
        else {
        
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
        if (DEBUG) {
            System.out.println("CockAndShootQuickly end");
        }
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
