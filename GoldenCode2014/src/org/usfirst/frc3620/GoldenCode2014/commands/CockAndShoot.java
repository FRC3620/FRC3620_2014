// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3620.GoldenCode2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3620.GoldenCode2014.Robot;
/**
 *
 */
public class CockAndShoot extends Command {
    long startTime;
    long elapsedTime;
    boolean waitingForTimer = false;
    public CockAndShoot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapultSubsystem);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        waitingForTimer = false;
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        boolean isCocked = Robot.catapultSubsystem.isCocked();
        boolean inPosition = Robot.catapultSubsystem.inPosition();
        if(isCocked){
            Robot.catapultSubsystem.turnMotor();
        }
        else{
            if(inPosition){
                Robot.catapultSubsystem.turnMotorHalfSpeed();
            }
            else{
            Robot.catapultSubsystem.turnMotor();
            }
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        elapsedTime = System.currentTimeMillis() - startTime;
        boolean rv = false;
        boolean isCocked = Robot.catapultSubsystem.isCocked();
        boolean inPosition = Robot.catapultSubsystem.inPosition();
        if (isCocked) {
            if (inPosition) {
                Robot.pneumaticSubsystem.hoopDown();
                rv = false;
            } else {
                Robot.catapultSubsystem.setIsCocked(false);
                Robot.pneumaticSubsystem.hoopUp();
                rv = true;
            }
        } else {
            // run this when getting cocked
            if (!waitingForTimer) {
                if (inPosition) { //turns motor until inPosition is true
                    startTime = System.currentTimeMillis();
                    
                    waitingForTimer = true;
                }
            } else {
                if (System.currentTimeMillis() - startTime > 120) {
                    //then sets cocked to true.
                    rv = true;
                    Robot.catapultSubsystem.setIsCocked(true);
                    //}
                }
            }
        }
        System.out.println(
                "cocked=" + isCocked + ", switch=" + inPosition + ",w=" + waitingForTimer + ", done=" + rv);
        return rv;
    }
// Called once after isFinished returns true
    protected void end() {
        Robot.catapultSubsystem.motorOff();
        System.out.println("shutting off motor");
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
