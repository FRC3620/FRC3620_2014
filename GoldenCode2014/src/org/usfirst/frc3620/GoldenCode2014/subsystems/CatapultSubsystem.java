// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3620.GoldenCode2014.subsystems;
import org.usfirst.frc3620.GoldenCode2014.RobotMap;
import org.usfirst.frc3620.GoldenCode2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.GoldenCode2014.FDR;
/**
 *
 */
public class CatapultSubsystem extends Subsystem {
    boolean isCocked = false;
    public FDR encoderVoltageFDR = new FDR();
    public FDR averageEncoderVoltageFDR = new FDR();
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController chooChoomotor = RobotMap.catapultSubsystemChooChoomotor;
    AnalogChannel chooChooEncoder = RobotMap.catapultSubsystemChooChooEncoder;
    DigitalInput chooChooLimitSwitch = RobotMap.catapultSubsystemChooChooLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void turnMotor() {
        chooChoomotor.set(-1.0);
    }
    public void motorOff() {
        chooChoomotor.set(0);
    }
    public boolean inPosition() {
        long now = System.currentTimeMillis();

        double encoderValue = chooChooEncoder.getAverageVoltage();
        averageEncoderVoltageFDR.add(now, encoderValue);
        encoderVoltageFDR.add(now, chooChooEncoder.getVoltage());
        
        boolean chooChooSwitch = chooChooLimitSwitch.get();
        
        boolean rv = false;
       // if (((0.7 < encoderValue) && (encoderValue < 1.153)) || (chooChooSwitch == true)) { //Checks if the motor is in the
            if(chooChooSwitch){
            
        rv = true;                                        //cocked position
        } else {
            rv = false;
        }
        SmartDashboard.putBoolean("in dead band", rv);
        if (rv) {
            //averageEncoderVoltageFDR.printData(true);
            //encoderVoltageFDR.printData(true);
        }
        return rv;
    }
    //NetworkTable visionTable;
    public boolean visionSeesHotGoal() {
        return SmartDashboard.getBoolean("okToFire", false);
    }
    public boolean isCocked() {
        return isCocked;
    }
    public void setIsCocked(boolean newIsCocked) {
        isCocked = newIsCocked;
    }
    /**
     * add any needed code to run when robot powers up.
     */
    public void init() {
        SmartDashboard.putBoolean("okToFire", false);
        setIsCocked(true);
    }
    
    /**
     * add any needed code to run if the mode changes.
     */
    public void modeChanged() {
        // 
    }
    /**
     * add any needed code to run everytime periodic is called.
     */
    public void periodic() {
        SmartDashboard.putBoolean("choochoo.switch",  chooChooLimitSwitch.get());   
    }
}
