// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3620.GoldenCode2014.subsystems;
import org.usfirst.frc3620.GoldenCode2014.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.GoldenCode2014.Robot;
import org.usfirst.frc3620.GoldenCode2014.RobotMode;
import org.usfirst.frc3620.GoldenCode2014.commands.DriveArcadeCommand;

/**
 *
 */
public class DriveSubsystem extends Subsystem {
    boolean reverse = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController speedController2 = RobotMap.driveSubsystemSpeedController2;
    SpeedController speedController3 = RobotMap.driveSubsystemSpeedController3;
    SpeedController speedController5 = RobotMap.driveSubsystemSpeedController5;
    SpeedController speedController6 = RobotMap.driveSubsystemSpeedController6;
    RobotDrive primaryDrive = RobotMap.driveSubsystemPrimaryDrive;
    SpeedController speedController4 = RobotMap.driveSubsystemSpeedController4;
    SpeedController speedController1 = RobotMap.driveSubsystemSpeedController1;
    RobotDrive turboDrive = RobotMap.driveSubsystemTurboDrive;
    Encoder driveEncoder = RobotMap.driveSubsystemDriveEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveArcadeCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void arcadeDrive(GenericHID hid) {
        Robot.getTelemetryTable().putNumber("js.x", hid.getX());
        Robot.getTelemetryTable().putNumber("js.y", hid.getY());
        Robot.getTelemetryTable().putNumber("js.z", hid.getZ());
        Robot.getTelemetryTable().putNumber("js.throttle", hid.getThrottle());
        Robot.getTelemetryTable().putNumber("js.twist", hid.getTwist());
        double rotate = hid.getThrottle();
        double move = hid.getY();
        //if (SmartDashboard.getBoolean("drive.squared")) {
        double r2 = Math.sqrt(Math.abs(rotate * rotate * rotate));
        if (rotate < 0) {
            r2 = -r2;
        }
        double m2 = Math.abs(move * move);
        if (move < 0) {
            m2 = -m2;
        }
        if (reverse == true) {
            primaryDrive.arcadeDrive(-m2, r2);
            turboDrive.arcadeDrive(-m2, r2);
        } else {
            primaryDrive.arcadeDrive(m2, r2);
            turboDrive.arcadeDrive(m2, r2);
        }
    }
    public void toggleReverseMode() {
        // use setReverseMode so that the dashboard gets updated
        setReverseMode(!reverse);
    }
    public void setReverseMode(boolean newReverse) {
        reverse = newReverse;
        SmartDashboard.putString("reverseMode", reverse ? "reverse" : "forward");
        Robot.getTelemetryTable().putBoolean("drive.reversed", reverse);
    }
    public boolean getReverseMode() {
        return reverse;
    }
    public void allForward() {
        // TODO rework these to use the RobotDrive.tankDrive objects
        speedController1.set(0.5);
        speedController2.set(0.5);
        speedController3.set(0.5);
        speedController4.set(0.5);
    }
    public void allStop() {
        primaryDrive.stopMotor();
        turboDrive.stopMotor();
    }
    
    /**
     * add any needed code to run when robot powers up.
     */
    public void init() {
        SmartDashboard.putBoolean("okToFire", false);
        setReverseMode(false);
    }

    /**
     * add any needed code to run if the mode changes.
     */
    public void modeChanged() {
        if (Robot.getCurrentRobotMode() == RobotMode.TELEOP) {
            setReverseMode(false);
        }
    }

    /**
     * add any needed code to run everytime periodic is called.
     */
    public void periodic() {
        //  
        Robot.getTelemetryTable().putNumber("drive.main.left", speedController1.get());
        Robot.getTelemetryTable().putNumber("drive.main.right", speedController4.get());
    }
}
